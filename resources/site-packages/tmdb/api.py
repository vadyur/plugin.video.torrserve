# -*- coding: utf-8 -*-

import json
import socket
import urllib
import ssl
import time
from threading import Thread
import sys

if sys.version_info >= (3, 0):
    from queue import Queue, PriorityQueue
    import urllib.request as urllib_request
else:
    from Queue import Queue, PriorityQueue
    import urllib2 as urllib_request

socket.setdefaulttimeout(20)
ssl._create_default_https_context = ssl._create_unverified_context

try:
    addon = __import__('xbmcaddon').Addon()
    language = addon.getSetting('LanguageID')
    is_region = addon.getSetting('is_region') == 'true'
    regionid = addon.getSetting('regionID')
    adult = addon.getSetting('is_adult') == 'true'
except:
    language = 'ru'
    is_region = True
    regionid = 'RU'
    adult = False

class TMDB:
    def __init__(self):
        self.api_key = '99e8b7beac187a857152f57d67495cf4'
        self.language = language + '-' + language
        self.is_region = is_region
        self.adult = adult
        self.region = regionid

    def discover_movie(self, year=None, page=None, wolang=None, genres=None, ngenres=None, params=None):
        data = {}
        data['api_key'] = self.api_key
        data['language'] = self.language
        if self.is_region: data['region'] = self.region
#        data['with_release_type'] = '2|3'
        if year: data['year'] = year
        if page: data['page'] = page
        if wolang: data['with_original_language'] = wolang
        if genres: data['with_genres'] = genres
        if ngenres:data['without_genres'] = ngenres
#        data['sort_by'] = 'vote_count.desc'
        if self.adult: data['include_adult'] = 'true'
        if params: data.update(params)
        url_values = urllib.urlencode(data)
        url = 'http://api.themoviedb.org/3/discover/movie?{0}'.format(url_values)
        infostring = self.req(url)
        infostring = moreInfo(infostring, 'movie')
        return infostring

    def discover_tvshow(self, year=None, page=None, wolang=None, genres=None, ngenres=None, params=None):
        data = {}
        data['api_key'] = self.api_key
        data['language'] = self.language
        if year: data['air_date.gte'] = str(year)+'-01-01'
        if page: data['page'] = page
        if wolang: data['with_original_language'] = wolang
        if genres: data['with_genres'] = genres
        if ngenres:data['without_genres'] = ngenres
        if self.adult: data['include_adult'] = 'true'
        if params: data.update(params)
        url_values = urllib.urlencode(data)
        url = 'http://api.themoviedb.org/3/discover/tv?{0}'.format(url_values)
        infostring = self.req(url)
        infostring = moreInfo(infostring, 'tv')
        return infostring

    def trending(self, mtype='all', wtime='day', page=None):
        data = {}
        data['api_key'] = self.api_key
        data['language'] = self.language
        if page: data['page'] = page
        if self.adult: data['include_adult'] = 'true'
        url_values = urllib.urlencode(data)
        url = 'http://api.themoviedb.org/3/trending/{0}/{1}?{2}'.format(mtype, wtime, url_values)
        infostring = self.req(url)
        infostring = moreInfo(infostring)
        return infostring

    def search_movies(self, query, page=None, params=None):
        data = {}
        data['api_key'] = self.api_key
        if page: data['page'] = str(page)
        data['query'] = query
        data['language'] = self.language
        if self.adult: data['include_adult'] = 'true'
        if params: data.update(params)
        url_values = urllib.urlencode(data)
        url = 'http://api.themoviedb.org/3/search/movie?{0}'.format(url_values)
        infostring = self.req(url)
        infostring = moreInfo(infostring, 'movie')
        return infostring

    def search_tv_shows(self, query, page=None, params=None):
        data = {}
        data['api_key'] = self.api_key
        if page: data['page'] = str(page)
        data['query'] = query
        data['language'] = self.language
        if self.adult: data['include_adult'] = 'true'
        if params: data.update(params)
        url_values = urllib.urlencode(data)
        url = 'http://api.themoviedb.org/3/search/tv?{0}'.format(url_values)
        infostring = self.req(url)
        infostring = moreInfo(infostring, 'tv')
        return infostring

    def get_movie(self, id):
        data = {}
        data['append_to_response'] = 'credits,trailers,releases'
        data['api_key'] = self.api_key
        data['language'] = self.language
        url_values = urllib.urlencode(data)
        url = 'http://api.themoviedb.org/3/movie/{0}?{1}'.format(id, url_values)
        infostring = self.req(url)
        return infostring

    def get_tv_show(self, id):
        data = {}
        data['api_key'] = self.api_key
        data['language'] = self.language
#        if self.is_region: data['region'] = self.language[:2].upper()
        data['append_to_response'] = 'credits,releases,external_ids,videos,content_ratings'
        url_values = urllib.urlencode(data)
        url = 'http://api.themoviedb.org/3/tv/{0}?{1}'.format(id, url_values)
        infostring = self.req(url)
        return infostring

    def get_person(self, id):
        data = {}
        data['api_key'] = self.api_key
        data['language'] = self.language
        data['append_to_response'] = 'movie_credits,tv_credits'
        if self.adult: data['include_adult'] = 'true'
        url_values = urllib.urlencode(data)
        url = 'http://api.themoviedb.org/3/person/{0}?{1}'.format(id, url_values)
        infostring = self.req(url)
        return infostring

    def req(self, url):
        resp = "{}"
        try:
            response = urllib_request.urlopen(url)
        except urllib_request.HTTPError as e:
            if e.code == 429:
                ret_after = float(e.info().get('Retry-After', 10))
                time.sleep(ret_after + 0.5)
                response = urllib_request.urlopen(url)
#            else: raise e
        else:
            resp = response.read()
        infostring = json.loads(resp.decode('utf-8', 'replace'))
        return infostring

def moreInfo(infostring, type='movie'):
    queue = Queue()
    result = PriorityQueue()
    for i in infostring.get('results', []):
        queue.put(( i.get('id'), i.get('media_type', type) ))
    for i in range(5):
        w = Worker(queue, result, type)
        w.start()
    queue.join()
    out = []
    while not result.empty():
        out.append(result.get()[1])
    infostring['results'] = out
    return infostring


class Worker(Thread):
    counter = -1

    def __init__(self, queue_in, queue_out, type):
        super(Worker, self).__init__()
        self.setDaemon(True)
        self.__queue_in = queue_in
        self.__queue_out = queue_out
        self.type = type
        self.tmdb = TMDB()

    def run(self):
        while not self.__queue_in.empty():
            job = self.__queue_in.get()
            Worker.counter += 1
            num = Worker.counter
            mtype = job[1]
            try:
                if mtype == 'movie':
                   job = self.tmdb.get_movie(job[0])
                elif mtype == 'person':
                   job = self.tmdb.get_person(job[0])
                else:
                   job = self.tmdb.get_tv_show(job[0])
            except BaseException as e:
                job = e
                print(e)
            else:
                if job: job['media_type'] = mtype
            self.__queue_out.put((num, job))
            self.__queue_in.task_done()

if __name__ == '__main__':
	print (len(TMDB().discover_movie('2020',1)))
	print (len(TMDB().discover_movie('2020',1)))
	print (len(TMDB().discover_tvshow('2020',1,genres='16')))
	print (len(TMDB().trending('movie', 'day')))
	import threading
	for i in threading.enumerate()[1:]:
		print (i)
		print (i.counter)
#	time.sleep(0.1)
	print (threading.enumerate())
